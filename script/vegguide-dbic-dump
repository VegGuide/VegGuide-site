#!/usr/bin/env perl

use strict;
use warnings;

use DBIx::Class::Schema::Loader qw( make_schema_at );
use Getopt::Long;
use List::MoreUtils qw( any );
use PadWalker qw( peek_my );

sub main {
    my $schema;
    GetOptions( 'schema:s' => \$schema );

    $schema //= 'RegVeg';

    make_schema_at(
        'VegGuide::DB',
        {
            dump_directory => './lib',
            components     => [ 'InflateColumn::DateTime', 'TimeStamp' ],
            use_moose      => 1,
            datetime_timezone  => 'local',                  # XXX - I suck
            custom_column_info => \&_custom_column_info,
            generate_pod       => 0,
            rel_name_map       => \&_custom_rel_name_map,
            naming             => {
                ALL         => 'v8',
                force_ascii => 1,
            },
        },
        [ 'dbi:mysql:database=' . $schema, 'root', undef, ],
    );
}

sub _custom_column_info {
    my $table  = shift;
    my $column = shift;
    my $info   = shift;

    return unless $column =~ /^(?:creation|last_modified)_datetime$/;

    return {
        set_on_create => 1,
        set_on_update => ( $column eq 'last_modified_datetime' ? 1 : 0 ),
    };
}

my @BridgeTables = qw(
    LocationOwner
    LocaleEncoding
    UserLocationSubscription
    VendorAttribute
    VendorCategory
    VendorCuisine
);

sub _custom_rel_name_map {
    my $p = shift;

    if ( $p->{local_moniker} eq 'User' && $p->{remote_moniker} eq 'Location' )
    {
        return $p->{name} if $p->{type} eq 'belongs_to';

        if ( $p->{type} eq 'many_to_many' ) {
            my $pad = peek_my(2);
            if ( ${ $pad->{'$class1_to_link_table_rel_name'} } eq
                'user_location_subscriptions' ) {

                return 'subscribed_locations';
            }
            else {
                return 'owned_locations';
            }
        }

        return 'created_locations';
    }
    elsif ($p->{local_moniker} eq 'Location'
        && $p->{remote_moniker} eq 'User' ) {

        if ( $p->{type} eq 'many_to_many' ) {
            my $pad = peek_my(2);
            if ( ${ $pad->{'$class1_to_link_table_rel_name'} } eq
                'user_location_subscriptions' ) {

                return 'subscribers';
            }
            else {
                return 'owners';
            }
        }

        return 'creator';
    }

    return $p->{name};
}

main();
